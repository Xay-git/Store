package com.sweet.modular.product.controller;import com.alibaba.fastjson.JSON;import com.sweet.core.exception.ServiceException;import com.sweet.core.shiro.ShiroKit;import com.sweet.core.translationDict.DictParam;import com.sweet.core.translationDict.TranslationDict;import com.sweet.modular.category.entity.Category;import com.sweet.modular.category.service.CategoryService;import com.sweet.modular.inventory.entity.Inventory;import com.sweet.modular.inventory.service.InventoryService;import com.sweet.modular.product.entity.Cascader;import com.sweet.modular.product.entity.Test;import org.springframework.web.bind.annotation.RequestMapping;import com.sweet.core.model.ResultBean;import com.sweet.core.model.system.LayuiPageInfo;import com.sweet.modular.product.entity.Product;import com.sweet.modular.product.service.ProductService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import com.sweet.core.util.StringUtil;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.stereotype.Controller;import java.util.*;/** * <p> * 商品，项目表 前端控制器 * </p> * * @author admin * @since 2020-05-06 */@Controller@RequestMapping("/admin/product")public class ProductController {    @Autowired    ProductService productService;    @Autowired    CategoryService categoryService;    @Autowired    InventoryService inventoryService;    /**     * 列表页     */    @RequestMapping("/product_list")    public String list(){        return "/modular/product/product_list";    }    /**     * 编辑页     */    @RequestMapping("/product_edit")    public String edit(){        return "/modular/product/product_edit";    }    /**     * 添加/编辑     */    @RequestMapping("/editProduct")    @ResponseBody    public ResultBean editProduct(Product product){        if(product.getId()==null){            Product newProduct = productService.findProductByNo(product.getProductNo(),product.getProductType());            if(newProduct!=null){                throw new ServiceException("该编号已经被使用,换一个试试吧~");            }        }        productService.saveOrUpdate(product);        return ResultBean.success(product);    }    /**     * 删除     */    @RequestMapping("/delProduct")    @ResponseBody    public ResultBean delProduct(Product product){        productService.removeById(product);        return ResultBean.success(product);    }    /**     * 添加修改菜单     * @param menu     * @return     */    @RequestMapping("/getProductDetail")    @ResponseBody    public ResultBean getProductDetail(String id){        Product product = productService.getById(id);        return ResultBean.success(product);    }    /**     * 列表数据     */    @RequestMapping("/getProductList")    @ResponseBody    public LayuiPageInfo getProductList(Product Product){        LayuiPageInfo pageInfo = productService.findPageBySpec(Product);        return pageInfo;    }    /**     * 列表数据     */    @RequestMapping("/test")    @ResponseBody    public ResultBean test(){        return ResultBean.success(new Test());    }    @RequestMapping("/getProduct")    @ResponseBody    public ResultBean getProduct(){        String deptId = ShiroKit.getUser().getDeptId();        List<Category> projectCategorylist = categoryService.getCategoryByType(1);        List<Category> productCategorylist = categoryService.getCategoryByType(2);        List<Product> productlist = productService.getProductList();        //创建最外层        List<Cascader<Product>> list = new ArrayList<Cascader<Product>>();        Cascader<Product> projectCascader = new Cascader<Product>("project","项目");        Cascader<Product> productCascader = new Cascader<Product>("product","卖品");        //项目类        projectCategorylist.stream().forEach(category -> {            Cascader<Product> cascader = new Cascader<Product>(category.getId().toString(),category.getName());            for(int i=0;i<productlist.size();i++) {                Product product = productlist.get(i);                if(category.getId().equals(product.getCategoryId())){                    Cascader<Product> projectCascader1 = new Cascader<Product>(product.getProductNo(),"("+product.getProductNo()+") "+product.getName());                    projectCascader1.setOther(product);                    cascader.getChildren().add(projectCascader1);                    productlist.remove(i);                    i--;                }            }            if(cascader.getChildren().size()>0){                projectCascader.getChildren().add(cascader);            }        });        //卖品类        productCategorylist.stream().forEach(category -> {            Cascader<Product> cascader = new Cascader<Product>(category.getId().toString(),category.getName());            for(int i=0;i<productlist.size();i++) {                Product product = productlist.get(i);                if(category.getId().equals(product.getCategoryId())){                    Cascader<Product> productCascader1 = new Cascader<Product>(product.getProductNo(),"("+product.getProductNo()+") "+product.getName());                    productCascader1.setOther(product);                    cascader.getChildren().add(productCascader1);                    productlist.remove(i);                    i--;                }            }            if(cascader.getChildren().size()>0){                productCascader.getChildren().add(cascader);            }        });        list.add(projectCascader);        list.add(productCascader);        return ResultBean.success(list);    }}