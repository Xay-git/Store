package com.sweet.modular.sell.service.impl;import com.sweet.core.util.BigDecimalUtil;import com.sweet.modular.sell.entity.Sell;import com.sweet.modular.sell.mapper.SellMapper;import com.sweet.modular.sell.model.SellFull;import com.sweet.modular.sell.model.SellSort;import com.sweet.modular.sell.service.SellService;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.sweet.modular.selldetail.entity.Selldetail;import com.sweet.modular.statistical.model.CardStatistical;import org.springframework.stereotype.Service;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.sweet.core.model.system.LayuiPageFactory;import com.sweet.core.model.system.LayuiPageInfo;import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;import java.util.Map;/** * <p> * 销售表 服务实现类 * </p> * * @author admin * @since 2020-04-30 */@Servicepublic class SellServiceImpl extends ServiceImpl<SellMapper, Sell> implements SellService {    @Override    public LayuiPageInfo findPageBySpec(Sell sell, String beginTime, String endTime) {        Page pageContext = LayuiPageFactory.defaultPage();        IPage page = this.baseMapper.customPageList(pageContext, sell,beginTime,endTime);        return LayuiPageFactory.createPageInfo(page);    }    @Override    public List<Selldetail> getSellDetail(String userId, String beginTime, String endTime) {        return baseMapper.getSellDetail(userId, beginTime, endTime);    }    @Override    public List<Map<String, String>> getSellAmountByDate(int days, String deptId) {        return baseMapper.getSellAmountByDate(days,deptId);    }    @Override    public SellFull getSellAmountByYear(String deptId) {        return baseMapper.getSellAmountByYear(deptId);    }    @Override    public SellFull getSellAmountByMonth(String deptId) {        return baseMapper.getSellAmountByMonth(deptId);    }    @Override    public List<SellSort> getSellSort(String deptId) {        return baseMapper.getSellSort(deptId);    }    @Override    public List<Map<String, String>> getPayTypePercent(String deptId) {        return baseMapper.getPayTypePercent(deptId);    }    @Override    public CardStatistical findSelltypeByid(Integer type,Long id) {        List<Map> list = baseMapper.findSelltypeByid(type,id);        CardStatistical cardStatistical = new CardStatistical();        BigDecimal amount = new BigDecimal(0);        BigDecimal give = new BigDecimal(0);        List listTemp = new ArrayList();        for(Map map:list){            BigDecimal mapamount = (BigDecimal) map.get("amount");            BigDecimal mapgive= (BigDecimal) map.get("giveAmount");            amount = BigDecimalUtil.add(amount,mapamount);            give = BigDecimalUtil.add(give,mapgive);            if(!listTemp.contains(map.get("memberId"))){                listTemp.add(map.get("memberId"));            }        }        switch (type){            //开卡            case 1:{                cardStatistical.setCardCount(list.size());                cardStatistical.setCardAmount(amount);                cardStatistical.setCardUserCount(listTemp.size());                cardStatistical.setCardGiveAmount(give);                break;            }            //续卡            case 2:{                cardStatistical.setChargedCount(list.size());                cardStatistical.setChargedAmount(amount);                cardStatistical.setChargedGiveAmount(give);                break;            }            //项目/卖品            case 3:{                break;            }            default:                break;        }        return cardStatistical;    }}