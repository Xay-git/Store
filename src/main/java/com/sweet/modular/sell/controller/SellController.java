package com.sweet.modular.sell.controller;import com.baomidou.mybatisplus.extension.api.R;import com.sweet.core.exception.ServiceException;import com.sweet.core.shiro.ShiroKit;import com.sweet.core.translationDict.DictParam;import com.sweet.core.translationDict.TranslationDict;import com.sweet.core.util.BigDecimalUtil;import com.sweet.core.util.DateUtil;import com.sweet.modular.cashier.cashierconst.CashierConst;import com.sweet.modular.membercard.entity.Membercard;import com.sweet.modular.membercard.service.MembercardService;import com.sweet.modular.sell.model.SellFull;import com.sweet.modular.sell.model.SellSort;import com.sweet.modular.selldetail.entity.Selldetail;import com.sweet.modular.selldetail.service.SelldetailService;import com.sweet.modular.sellpay.entity.Sellpay;import com.sweet.modular.sellpay.service.SellpayService;import com.sweet.system.model.UserDto;import com.sweet.system.service.UserService;import lombok.extern.slf4j.Slf4j;import org.springframework.web.bind.annotation.RequestMapping;import com.sweet.core.model.ResultBean;import com.sweet.core.model.system.LayuiPageInfo;import com.sweet.modular.sell.entity.Sell;import com.sweet.modular.sell.service.SellService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import com.sweet.core.util.StringUtil;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.stereotype.Controller;import java.math.BigDecimal;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.stream.Collectors;/** * <p> * 销售表 前端控制器 * </p> * * @author admin * @since 2020-04-30 */@Controller@RequestMapping("/admin/sell")@Slf4jpublic class SellController {    @Autowired    UserService userService;    @Autowired    SellService sellService;    @Autowired    SelldetailService selldetailService;    @Autowired    SellpayService sellpayService;    @Autowired    MembercardService membercardService;    /**     * 列表页     */    @RequestMapping("/sell_list")    public String list(){        return "/modular/sell/sell_list";    }    @RequestMapping("/canvas")    public String canvas(){        return "/modular/sell/canvas";    }    @RequestMapping("/sell_full")    public String sell_full(){        return "/modular/sell/sell_full";    }    @RequestMapping("/userSell_list")    public String userSell_list(){        return "/modular/sell/userSell_list";    }    /**     * 编辑页     */    @RequestMapping("/sell_edit")    public String edit(){        return "/modular/sell/sell_edit";    }    /**     * 添加/编辑     */    @RequestMapping("/editSell")    @ResponseBody    public ResultBean editSell(Sell sell){        sellService.saveOrUpdate(sell);        return ResultBean.success(sell);    }    /**     * 撤销订单     */    @RequestMapping("/delSell")    @ResponseBody    public ResultBean delSell(Sell sell,String remark){        //获得最新记录        sell = sellService.getById(sell.getId());        //销售单类型        Integer sellType = sell.getSellType();        //获得销售单详情        List<Selldetail> selldetailList = selldetailService.findBySellId(sell.getId());        //消费时用的哪张会员卡        Selldetail selldetailCardInfo = selldetailList.get(0);        Membercard membercard = membercardService.getById(selldetailCardInfo.getMemberCardId());        if(membercard!=null){            BigDecimal CardHistoryAmount = selldetailCardInfo.getMemberCardAmount();            log.info("订单显示的卡余额:"+CardHistoryAmount);            BigDecimal cardAmount = membercard.getAmount();            log.info("当前卡余额:"+cardAmount);            //当前卡余额不等于细单余额禁止销单            if(CardHistoryAmount.compareTo(cardAmount) != 0){                throw new ServiceException("该卡已经生成销售记录,禁止销单~");            }else{                if(sellType!=CashierConst.SELL_PRODUCT){                    //开卡操作直接删除卡                    if(sellType==CashierConst.SELL_BUILD_CARD){                        //删除卡                        membercardService.removeById(membercard);                    }                    //充卡操作扣除充值钱数                    if(sellType==CashierConst.SELL_CHARGED_CARD){                        BigDecimal chargedAmount = BigDecimalUtil.add(selldetailCardInfo.getAmount(),selldetailCardInfo.getGiveAmount());                        membercard.setAmount(BigDecimalUtil.sub(cardAmount,chargedAmount));                        membercardService.updateById(membercard);                    }                }else {                    List<Sellpay> sellpayList = sellpayService.findBySellId(sell.getId());                    //计算订单卡金支付的金额                    Sellpay memberCardPay = sellpayList.stream().filter(p->p.getPayType()== CashierConst.PAY_MEMBERCARD).findFirst().orElse(null);                    if(memberCardPay!=null){                        membercard.setAmount(BigDecimalUtil.add(cardAmount,memberCardPay.getAmount()));                    }                    membercardService.updateById(membercard);                }            }        }        //设置订单状态为撤销        sell.setStatus(CashierConst.SELL_STATUS_REVOCATION);        sell.setRemark(remark);        sellService.updateById(sell);        return ResultBean.success(sell);    }    @RequestMapping("/getSellDetail")    @ResponseBody    public ResultBean getSellDetail(String id){        Sell sell = sellService.getById(id);        return ResultBean.success(sell);    }    /**     * 列表数据     */    @RequestMapping("/getSellList")    @ResponseBody    public LayuiPageInfo getSellList(Sell Sell,String beginTime,String endTime){        LayuiPageInfo pageInfo = sellService.findPageBySpec(Sell,beginTime,endTime);        List<Sell> list = pageInfo.getData();        list.stream().forEach(sell -> {            Long sellId = sell.getId();            List<Selldetail> selldetailList = selldetailService.findBySellId(sellId);            List<Sellpay> sellpayList = sellpayService.findBySellId(sellId);            sell.setSelldetailList(selldetailList);            sell.setSellpayList(sellpayList);        });        return pageInfo;    }    @RequestMapping("/getTechnicians")    @ResponseBody    public LayuiPageInfo getTechnicians(String deptId,String beginTime,String endTime){        LayuiPageInfo pageInfo = userService.getTechnicians(deptId);        List<UserDto> list =  pageInfo.getData();        list.stream().forEach(userDto -> {            String userId = userDto.getUserId();            List<Selldetail> detailList = sellService.getSellDetail(userId,beginTime,endTime);            userDto.setSellList(detailList);        });        return pageInfo;    }    @RequestMapping("/getAfewDaySell")    @ResponseBody    public ResultBean getFewDaySell(String deptId){        List<String> datelist = DateUtil.getDaysBetwwen(7);        List<Map<String, String>> list = sellService.getSellAmountByDate(7,deptId);        List<BigDecimal> dateOfMoney = new ArrayList<>();        datelist.stream().forEach(createTime->{            final BigDecimal[] money = {new BigDecimal(0.00)};            list.stream().forEach(map -> {                if(map.get("day").equals(createTime)){                    money[0] = new BigDecimal(String.valueOf(map.get("money")));                }            });            dateOfMoney.add(money[0]);        });        Map map = new HashMap();        map.put("datelist",datelist);        map.put("dateOfMoney",dateOfMoney);        return ResultBean.success(map);    }    @RequestMapping("/getfullSell")    @ResponseBody    public ResultBean getfullSell(String deptId){        Map map = new HashMap();        SellFull yearMoney = sellService.getSellAmountByYear(deptId);        map.put("year",yearMoney);        SellFull monthMoney = sellService.getSellAmountByMonth(deptId);        map.put("month",monthMoney);        List<SellSort> sellSortList = sellService.getSellSort(deptId);        List<SellSort> projectSortList = sellSortList.stream().filter(sellSort -> sellSort.getType() == CashierConst.PRODUCT_TYPE_PROJECT).collect(Collectors.toList());        map.put("projectSortList",projectSortList);        List<SellSort> productSortList = sellSortList.stream().filter(sellSort -> sellSort.getType() == CashierConst.PRODUCT_TYPE_PRODUCT).collect(Collectors.toList());        map.put("productSortList",productSortList);         List<Map<String,String>> percentList = sellService.getPayTypePercent(deptId);        map.put("percentList",percentList);        return ResultBean.success(map);    }}